name: All Tests

on:
  pull_request:
  push:
    branches:
      - main
      - release/**
      - cloud/**

  workflow_dispatch:
    inputs:
      commit:
        description: "Commit SHA"
        required: true
      run_single_functional_test:
        description: "Whether to run a single test. If so, the rest of the input fields are required."
        type: boolean
        default: false
      n_runs:
        description: "[Single Test Only] Number of times to repeat the single test"
        type: number
        default: 1
      test_name:
        description: "[Single Test Only] Name of the test suite to run, include -testify.m flag here if desired (i.e. 'TestAcquireShard_DeadlineExceededErrorSuite' or 'TestFunctionalSuite -testify.m=TestUpdateWorkflow')"
        type: string
      timeout_minutes:
        description: "[Single Test Only] When should the Github Action time out?"
        type: number
        default: 120
      test_db:
        description: "[Single Test Only] Which database to run your test against"
        default: "sqlite"
        type: choice
        options:
          - "cass_es"
          - "cass_es8"
          - "sqlite"
          - "mysql8"
          - "postgres12"
          - "postgres12_pgx"

concurrency: # Auto-cancel existing runs in the PR when a new commit is pushed
  group: run-tests-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  COMMIT: ${{ github.event.inputs.commit || github.sha }}
  DOCKER_COMPOSE_FILE: ./develop/github/docker-compose.yml
  TEMPORAL_VERSION_CHECK_DISABLED: 1
  BUILDKITE_ANALYTICS_TOKEN: ${{ secrets.BUILDKITE_ANALYTICS_TOKEN }}

jobs:

  cache-docker-images:
    if: ${{ inputs.run_single_functional_test == 'false' }} # todo: remove
    name: Cache Docker images
    strategy:
      fail-fast: false
      matrix:
        runs-on: [ubuntu-20.04]
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: ScribeMD/docker-cache@0.3.7
        with:
          key: docker-${{ runner.os }}-${{ hashFiles(env.DOCKER_COMPOSE_FILE) }}

      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ env.COMMIT }}

      - run: docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} pull

  misc-checks:
    if: ${{ inputs.run_single_functional_test == 'false' }}
    name: Misc checks
    strategy:
      fail-fast: false
      matrix:
        runs-on: [ubuntu-20.04]
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ env.COMMIT }}
          submodules: true

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          check-latest: true

      - uses: arduino/setup-protoc@v3

      - run: make ci-build-misc

      - run: make build-tests

  unit-test:
    if: ${{ inputs.run_single_functional_test == 'false' }}
    name: Unit test
    needs: misc-checks
    strategy:
      fail-fast: false
      matrix:
        runs-on: [ubuntu-20.04]
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ env.COMMIT }}

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          check-latest: true

      - name: Run unit test
        timeout-minutes: 15
        run: make unit-test-coverage

      - name: Upload test results
        if: ${{ !cancelled() }}
        run: make upload-test-results

  integration-test:
    if: ${{ inputs.run_single_functional_test == 'false' }}
    name: Integration test
    needs: [misc-checks, cache-docker-images]
    strategy:
      fail-fast: false
      matrix:
        runs-on: [ubuntu-20.04]
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: ScribeMD/docker-cache@0.3.7
        with:
          key: docker-${{ runner.os }}-${{ hashFiles(env.DOCKER_COMPOSE_FILE) }}

      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ env.COMMIT }}

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          check-latest: true

      - name: Start containerized dependencies
        run: |
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} up -d cassandra mysql postgresql

      - name: Run integration test
        timeout-minutes: 15
        run: make integration-test-coverage

      - name: Upload test results
        if: ${{ !cancelled() }}
        run: make upload-test-results

      - name: Tear down docker compose
        if: ${{ always() }}
        run: |
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} down -v


  set-up-functional-test:
    if: always()
    name: Set up functional test
    runs-on: ubuntu-20.04
    outputs:
      shard_index: ${{ steps.shard_matrix_step.outputs.shard_index }}
      total_shards: ${{ steps.total_shards_step.outputs.total_shards }}
      single_test_args: ${{ steps.test_args_step.outputs.single_test_args }}
      functional_test_timeout: ${{ steps.test_args_step.outputs.timeout }}
    steps:
      - id: shard_matrix_step
        run: |
          if [ ${{ inputs.run_single_functional_test }} = 'true' ]; then shard_index='{ "shard_index": [0] }'; else shard_index='{ "shard_index": [0, 1, 2] }'; fi
          echo "shard_index=$shard_index" >> "$GITHUB_OUTPUT"
      - id: total_shards_step
        run: |  
          if [ ${{ inputs.run_single_functional_test }} = 'true' ]; then total_shards=1; else total_shards=3; fi
          echo "total_shards=$total_shards" >> "$GITHUB_OUTPUT"
      - id: test_args_step
        run: |  
          if [ ${{ inputs.run_single_functional_test }} = 'true' ]; then single_test_args="-test.run ${{ inputs.test_name }} -count ${{ inputs.n_runs }}"; fi
          echo "single_test_args=$single_test_args" >> "$GITHUB_OUTPUT"
      - id: timeout_step
        run: |
          if [ ${{ inputs.run_single_functional_test }} = 'true' ]; then timeout="${{ inputs.timeout_minutes }}"; else timeout="30"; fi
          echo "timeout=$timeout" >> "$GITHUB_OUTPUT" 

  functional-test:
    if: always()
    name: Functional test
    #needs: [misc-checks, cache-docker-images, set-up-functional-test]
    needs: [misc-checks, set-up-functional-test]
    strategy:
      fail-fast: false
      matrix:
        runs-on: [ubuntu-20.04]
        name: [cass_es, cass_es8, sqlite, mysql8, postgres12, postgres12_pgx]
        #shard_index: ${{ fromJson(needs.set-up-functional-test.outputs.shard_index) }}
        shard_index: [0] # todo
        include:
          - name: cass_es
            persistence_type: nosql
            persistence_driver: cassandra
            containers: [cassandra, elasticsearch]
          - name: cass_es8
            persistence_type: nosql
            persistence_driver: cassandra
            containers: [cassandra, elasticsearch8]
          - name: sqlite
            persistence_type: sql
            persistence_driver: sqlite
            containers: []
          - name: mysql8
            persistence_type: sql
            persistence_driver: mysql8
            containers: [mysql]
          - name: postgres12
            persistence_type: sql
            persistence_driver: postgres12
            containers: [postgresql]
          - name: postgres12_pgx
            persistence_type: sql
            persistence_driver: postgres12_pgx
            containers: [postgresql]
    runs-on: ${{ matrix.runs-on }}
    env:
      TEST_TOTAL_SHARDS: ${{ needs.set-up-functional-test.outputs.total_shards }}
      TEST_SHARD_INDEX: ${{ matrix.shard_index }}
      PERSISTENCE_TYPE: ${{ matrix.persistence_type }}
      PERSISTENCE_DRIVER: ${{ matrix.persistence_driver }}
      SINGLE_TEST_ARGS: ${{ needs.set-up-functional-test.outputs.single_test_args }}
      FUNCTIONAL_TEST_TIMEOUT: ${{ needs.set-up-functional-test.outputs.functional_test_timeout }}
    steps:
      - name: Print things
        run: |
          echo "$TEST_TOTAL_SHARDS"
          echo "$SINGLE_TEST_ARGS"
          echo "$FUNCTIONAL_TEST_TIMEOUT"
          echo ${{ fromJson(needs.set-up-functional-test.outputs.shard_index) }}

  #    - uses: ScribeMD/docker-cache@0.3.7
  #      with:
  #        key: docker-${{ runner.os }}-${{ hashFiles(env.DOCKER_COMPOSE_FILE) }}

  #    - uses: actions/checkout@v4
  #      with:
  #        token: ${{ secrets.GITHUB_TOKEN }}
  #        ref: ${{ env.COMMIT }}

  #    - uses: actions/setup-go@v5
  #      with:
  #        go-version-file: 'go.mod'
  #        check-latest: true

  #    - name: Start containerized dependencies
  #      if: ${{ toJson(matrix.containers) != '[]' }}
  #      run: |
  #        docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} up -d ${{ join(matrix.containers, ' ') }}

      - name: Run functional test
        timeout-minutes: ${{ env.FUNCTIONAL_TEST_TIMEOUT }} # make sure this is larger than the test timeout in the Makefile
        run: make functional-test-coverage

  #    - name: Upload test results
  #      if: ${{ !cancelled() }}
  #      run: make upload-test-results

  #    - name: Tear down docker compose
  #      if: ${{ always() }}
  #      run: |
  #        docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} down -v

  functional-test-xdc:
    if: ${{ inputs.run_single_functional_test == 'false' }}
    name: Functional test xdc
    needs: [misc-checks, cache-docker-images]
    strategy:
      fail-fast: false
      matrix:
        runs-on: [ubuntu-20.04]
        name: [cass_es]
#        name: [cass_es, cass_es8, mysql8, postgres12, postgres12_pgx]
        include:
          - name: cass_es
            persistence_type: nosql
            persistence_driver: elasticsearch
            containers: [cassandra, elasticsearch]
#          - name: cass_es8
#            persistence_type: nosql
#            persistence_driver: elasticsearch
#            containers: [cassandra, elasticsearch8]
#          - name: mysql8
#            persistence_type: sql
#            persistence_driver: mysql8
#            containers: [mysql]
#          - name: postgres12
#            persistence_type: sql
#            persistence_driver: postgres12
#            containers: [postgresql]
#          - name: postgres12_pgx
#            persistence_type: sql
#            persistence_driver: postgres12_pgx
#            containers: [postgresql]
    runs-on: ${{ matrix.runs-on }}
    env:
      PERSISTENCE_TYPE: ${{ matrix.persistence_type }}
      PERSISTENCE_DRIVER: ${{ matrix.persistence_driver }}
    steps:
      - uses: ScribeMD/docker-cache@0.3.7
        with:
          key: docker-${{ runner.os }}-${{ hashFiles(env.DOCKER_COMPOSE_FILE) }}

      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ env.COMMIT }}

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          check-latest: true

      - name: Start containerized dependencies
        if: ${{ toJson(matrix.containers) != '[]' }}
        run: |
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} up -d ${{ join(matrix.containers, ' ') }}

      - name: Run functional test xdc
        timeout-minutes: 15
        run: make functional-test-xdc-coverage

      - name: Upload test results
        if: ${{ !cancelled() }}
        run: make upload-test-results

      - name: Tear down docker compose
        if: ${{ always() }}
        run: |
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} down -v

  functional-test-ndc:
    if: ${{ inputs.run_single_functional_test == 'false' }}
    name: Functional test ndc
    needs: [misc-checks, cache-docker-images]
    strategy:
      fail-fast: false
      matrix:
        runs-on: [ubuntu-20.04]
        name: [cass_es, cass_es8, mysql8, postgres12, postgres12_pgx]
        include:
          - name: cass_es
            persistence_type: nosql
            persistence_driver: elasticsearch
            containers: [cassandra, elasticsearch]
          - name: cass_es8
            persistence_type: nosql
            persistence_driver: elasticsearch
            containers: [cassandra, elasticsearch8]
          - name: mysql8
            persistence_type: sql
            persistence_driver: mysql8
            containers: [mysql]
          - name: postgres12
            persistence_type: sql
            persistence_driver: postgres12
            containers: [postgresql]
          - name: postgres12_pgx
            persistence_type: sql
            persistence_driver: postgres12_pgx
            containers: [postgresql]
    runs-on: ${{ matrix.runs-on }}
    env:
      PERSISTENCE_TYPE: ${{ matrix.persistence_type }}
      PERSISTENCE_DRIVER: ${{ matrix.persistence_driver }}
    steps:
      - uses: ScribeMD/docker-cache@0.3.7
        with:
          key: docker-${{ runner.os }}-${{ hashFiles(env.DOCKER_COMPOSE_FILE) }}

      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ env.COMMIT }}

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          check-latest: true

      - name: Start containerized dependencies
        if: ${{ toJson(matrix.containers) != '[]' }}
        run: |
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} up -d ${{ join(matrix.containers, ' ') }}

      - name: Run functional test ndc
        timeout-minutes: 15
        run: make functional-test-ndc-coverage

      - name: Tear down docker compose
        if: ${{ always() }}
        run: |
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} down -v

  test-status:
    if: ${{ inputs.run_single_functional_test == 'false' }}
    name: Test Status
    needs:
      - unit-test
      - integration-test
      - functional-test
      - functional-test-xdc
      - functional-test-ndc
    runs-on: ubuntu-20.04
    env:
      RESULTS: ${{ toJSON(needs.*.result) }}
    steps:
      - name: Check results
        run: |
          if [[ -n $(echo "$RESULTS" | jq '.[] | select (. != "success")') ]]; then
            exit 1
          fi
