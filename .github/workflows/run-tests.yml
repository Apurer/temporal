name: All Tests

on:
  pull_request:
  push:
    branches:
      - main
      - release/**
      - cloud/**

  workflow_dispatch:
    inputs:
      commit:
        description: "Commit SHA"
        required: true
      run_single_functional_test:
        description: "Whether to run a single test. If so, the rest of the input fields are required."
        type: boolean
        default: false
      n_runs:
        description: "[Single Test Only] Number of times to repeat the single test per database type"
        type: number
        default: 1
      test_name:
        description: "[Single Test Only] Name of the test suite to run, include -testify.m flag here if desired (i.e. 'TestAcquireShard_DeadlineExceededErrorSuite' or 'TestFunctionalSuite -testify.m=TestUpdateWorkflow')"
        type: string
      timeout_minutes:
        description: "[Single Test Only] test timeout in minutes"
        type: number
        default: 120

concurrency: # Auto-cancel existing runs in the PR when a new commit is pushed
  group: run-tests-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  # For workflow_dispatch: use the given commit.
  # For pull_request: use the head of the PR branch (not the merge branch which is the default!)
  # For push: use the pushed commit.
  COMMIT: ${{ github.event.inputs.commit || github.event.pull_request.head.sha || github.sha }}
  PR_BASE_COMMIT: ${{ github.event.pull_request.base.sha }}
  DOCKER_COMPOSE_FILE: ./develop/github/docker-compose.yml
  TEMPORAL_VERSION_CHECK_DISABLED: 1
  BUILDKITE_ANALYTICS_TOKEN: ${{ secrets.BUILDKITE_ANALYTICS_TOKEN }}

jobs:

  misc-checks:
    if: ${{ inputs.run_single_functional_test != true }}
    name: Misc checks
    strategy:
      fail-fast: false
      matrix:
        runs-on: [ubuntu-20.04]
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ env.COMMIT }}
          # buf-breaking tries to compare HEAD against merge base so we need to be able to find it
          fetch-depth: 100

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          check-latest: true

      - uses: arduino/setup-protoc@v3

      - run: GOOS=windows GOARCH=amd64 make clean-bins bins

      - run: GOOS=darwin GOARCH=arm64 make clean-bins bins

      - run: make clean-bins ci-build-misc

      - run: make build-tests

  cache-docker-images:
    name: Cache Docker images
    strategy:
      fail-fast: false
      matrix:
        runs-on: [ubuntu-20.04]
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: ScribeMD/docker-cache@0.3.7
        with:
          key: docker-${{ runner.os }}-${{ hashFiles(env.DOCKER_COMPOSE_FILE) }}

      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ env.COMMIT }}

      - run: docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} pull

  unit-test:
    if: ${{ inputs.run_single_functional_test != true }}
    name: Unit test
    needs: misc-checks
    strategy:
      fail-fast: false
      matrix:
        runs-on: [ubuntu-20.04]
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ env.COMMIT }}

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          check-latest: true

      - name: Run unit test
        timeout-minutes: 15
        run: make unit-test-coverage

      - name: Upload test results
        if: ${{ !cancelled() }}
        run: make upload-test-results

  integration-test:
    if: ${{ inputs.run_single_functional_test != true }}
    name: Integration test
    needs: [misc-checks, cache-docker-images]
    strategy:
      fail-fast: false
      matrix:
        runs-on: [ubuntu-20.04]
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: ScribeMD/docker-cache@0.3.7
        with:
          key: docker-${{ runner.os }}-${{ hashFiles(env.DOCKER_COMPOSE_FILE) }}

      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ env.COMMIT }}

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          check-latest: true

      - name: Start containerized dependencies
        run: |
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} up -d cassandra mysql postgresql

      - name: Run integration test
        timeout-minutes: 15
        run: make integration-test-coverage

      - name: Upload test results
        if: ${{ !cancelled() }}
        run: make upload-test-results

      - name: Tear down docker compose
        if: ${{ always() }}
        run: |
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} down -v


  set-up-functional-test:
    name: Set up functional test
    runs-on: ubuntu-20.04
    outputs:
      shard_indices: ${{ steps.generate_output.outputs.shard_indices }}
      total_shards: ${{ steps.generate_output.outputs.shards }}
      single_test_args: ${{ steps.generate_output.outputs.single_test_args }}
      functional_test_timeout: ${{ steps.generate_output.outputs.timeout }}
    steps:
      - id: generate_output
        run: |
          shards=3
          timeout=30
          if [[ "${{ inputs.run_single_functional_test }}" == "true" ]]; then
            shards=1
            timeout=${{ inputs.timeout_minutes }}
            single_test_args="-test.run ${{ inputs.test_name }} -count ${{ inputs.n_runs }}"
          fi
          {
            echo "shard_indices=[$(seq -s, 0 $((shards-1)))]"
            echo "shards=$shards"
            echo "timeout=$timeout"
            echo "single_test_args=$single_test_args" 
          } >> "$GITHUB_OUTPUT"

  functional-test:
    name: Functional test
    needs: [cache-docker-images, set-up-functional-test]
    strategy:
      fail-fast: false
      matrix:
        runs-on: [ubuntu-20.04]
        shard_index: ${{ fromJson(needs.set-up-functional-test.outputs.shard_indices) }}
        name:
          - cass_es
          # - cass_es8
          - sqlite
          - mysql8
          - postgres12
          - postgres12_pgx
        include:
          - name: cass_es
            persistence_type: nosql
            persistence_driver: cassandra
            containers: [cassandra, elasticsearch]
          # - name: cass_es8
          #   persistence_type: nosql
          #   persistence_driver: cassandra
          #   containers: [cassandra, elasticsearch8]
          - name: sqlite
            persistence_type: sql
            persistence_driver: sqlite
            containers: []
          - name: mysql8
            persistence_type: sql
            persistence_driver: mysql8
            containers: [mysql]
          - name: postgres12
            persistence_type: sql
            persistence_driver: postgres12
            containers: [postgresql]
          - name: postgres12_pgx
            persistence_type: sql
            persistence_driver: postgres12_pgx
            containers: [postgresql]
    runs-on: ${{ matrix.runs-on }}
    env:
      TEST_TOTAL_SHARDS: ${{ needs.set-up-functional-test.outputs.total_shards }}
      TEST_SHARD_INDEX: ${{ matrix.shard_index }}
      PERSISTENCE_TYPE: ${{ matrix.persistence_type }}
      PERSISTENCE_DRIVER: ${{ matrix.persistence_driver }}
      SINGLE_TEST_ARGS: ${{ needs.set-up-functional-test.outputs.single_test_args }}
      TEST_TIMEOUT_MINUTES: ${{ needs.set-up-functional-test.outputs.functional_test_timeout }}
      TEST_TIMEOUT: "${{ env.TEST_TIMEOUT_MINUTES }}m"
    steps:
      - uses: ScribeMD/docker-cache@0.3.7
        with:
          key: docker-${{ runner.os }}-${{ hashFiles(env.DOCKER_COMPOSE_FILE) }}

      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ env.COMMIT }}

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          check-latest: true

      - name: Start containerized dependencies
        if: ${{ toJson(matrix.containers) != '[]' }}
        run: |
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} up -d ${{ join(matrix.containers, ' ') }}

      - name: Run functional test
        timeout-minutes: ${{ fromJSON(env.TEST_TIMEOUT_MINUTES) + 5 }} # make sure this is larger than the test timeout in the Makefile
        run: make functional-test-coverage

      - name: Upload test results
        if: ${{ !cancelled() }}
        run: make upload-test-results

      - name: Tear down docker compose
        if: ${{ always() }}
        run: |
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} down -v

  functional-test-xdc:
    if: ${{ inputs.run_single_functional_test != true }}
    name: Functional test xdc
    needs: [misc-checks, cache-docker-images]
    strategy:
      fail-fast: false
      matrix:
        runs-on: [ubuntu-20.04]
        name: [cass_es]
#        name: [cass_es, cass_es8, mysql8, postgres12, postgres12_pgx]
        include:
          - name: cass_es
            persistence_type: nosql
            persistence_driver: elasticsearch
            containers: [cassandra, elasticsearch]
#          - name: cass_es8
#            persistence_type: nosql
#            persistence_driver: elasticsearch
#            containers: [cassandra, elasticsearch8]
#          - name: mysql8
#            persistence_type: sql
#            persistence_driver: mysql8
#            containers: [mysql]
#          - name: postgres12
#            persistence_type: sql
#            persistence_driver: postgres12
#            containers: [postgresql]
#          - name: postgres12_pgx
#            persistence_type: sql
#            persistence_driver: postgres12_pgx
#            containers: [postgresql]
    runs-on: ${{ matrix.runs-on }}
    env:
      PERSISTENCE_TYPE: ${{ matrix.persistence_type }}
      PERSISTENCE_DRIVER: ${{ matrix.persistence_driver }}
    steps:
      - uses: ScribeMD/docker-cache@0.3.7
        with:
          key: docker-${{ runner.os }}-${{ hashFiles(env.DOCKER_COMPOSE_FILE) }}

      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ env.COMMIT }}

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          check-latest: true

      - name: Start containerized dependencies
        if: ${{ toJson(matrix.containers) != '[]' }}
        run: |
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} up -d ${{ join(matrix.containers, ' ') }}

      - name: Run functional test xdc
        timeout-minutes: 15
        run: make functional-test-xdc-coverage

      - name: Upload test results
        if: ${{ !cancelled() }}
        run: make upload-test-results

      - name: Tear down docker compose
        if: ${{ always() }}
        run: |
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} down -v

  functional-test-ndc:
    if: ${{ inputs.run_single_functional_test != true }}
    name: Functional test ndc
    needs: [misc-checks, cache-docker-images]
    strategy:
      fail-fast: false
      matrix:
        runs-on: [ubuntu-20.04]
        name: 
          - cass_es
          # - cass_es8
          - mysql8
          - postgres12
          - postgres12_pgx
        include:
          - name: cass_es
            persistence_type: nosql
            persistence_driver: elasticsearch
            containers: [cassandra, elasticsearch]
          # - name: cass_es8
          #   persistence_type: nosql
          #   persistence_driver: elasticsearch
          #   containers: [cassandra, elasticsearch8]
          - name: mysql8
            persistence_type: sql
            persistence_driver: mysql8
            containers: [mysql]
          - name: postgres12
            persistence_type: sql
            persistence_driver: postgres12
            containers: [postgresql]
          - name: postgres12_pgx
            persistence_type: sql
            persistence_driver: postgres12_pgx
            containers: [postgresql]
    runs-on: ${{ matrix.runs-on }}
    env:
      PERSISTENCE_TYPE: ${{ matrix.persistence_type }}
      PERSISTENCE_DRIVER: ${{ matrix.persistence_driver }}
    steps:
      - uses: ScribeMD/docker-cache@0.3.7
        with:
          key: docker-${{ runner.os }}-${{ hashFiles(env.DOCKER_COMPOSE_FILE) }}

      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ env.COMMIT }}

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          check-latest: true

      - name: Start containerized dependencies
        if: ${{ toJson(matrix.containers) != '[]' }}
        run: |
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} up -d ${{ join(matrix.containers, ' ') }}

      - name: Run functional test ndc
        timeout-minutes: 15
        run: make functional-test-ndc-coverage

      - name: Tear down docker compose
        if: ${{ always() }}
        run: |
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} down -v

  test-status:
    if: ${{ inputs.run_single_functional_test != true }}
    name: Test Status
    needs:
      - unit-test
      - integration-test
      - functional-test
      - functional-test-xdc
      - functional-test-ndc
    runs-on: ubuntu-20.04
    env:
      RESULTS: ${{ toJSON(needs.*.result) }}
    steps:
      - name: Check results
        run: |
          if [[ -n $(echo "$RESULTS" | jq '.[] | select (. != "success")') ]]; then
            exit 1
          fi
